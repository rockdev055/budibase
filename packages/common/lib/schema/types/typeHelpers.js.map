{"version":3,"sources":["../../../src/schema/types/typeHelpers.js"],"names":["getSafeFieldParser","tryParse","defaultValueFunctions","field","record","name","getSafeValueParser","getUndefinedValue","value","parsed","success","getNewValue","getInitialValue","typeFunctions","specificFunctions","constant","validateTypeConstraints","validationRules","fieldValue","validateRule","r","isValid","typeOptions","getMessage","errors","err","push","getDefaultOptions","v","defaultValue","makerule","parsedFailed","val","parsedSuccess","getDefaultExport","functions","options","sampleValue","stringify","getNew","safeParseField","safeParseValue","optionDefinitions","undefined","getDefaultValue"],"mappings":"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","sourcesContent":["import { merge } from \"lodash\"\r\nimport { constant, isUndefined, has, mapValues, cloneDeep } from \"lodash/fp\"\r\nimport { isNotEmpty } from \"../../common/index.js\"\r\n\r\nexport const getSafeFieldParser = (tryParse, defaultValueFunctions) => (\r\n  field,\r\n  record\r\n) => {\r\n  if (has(field.name)(record)) {\r\n    return getSafeValueParser(\r\n      tryParse,\r\n      defaultValueFunctions\r\n    )(record[field.name])\r\n  }\r\n  return defaultValueFunctions[field.getUndefinedValue]()\r\n}\r\n\r\nexport const getSafeValueParser = (\r\n  tryParse,\r\n  defaultValueFunctions\r\n) => value => {\r\n  const parsed = tryParse(value)\r\n  if (parsed.success) {\r\n    return parsed.value\r\n  }\r\n  return defaultValueFunctions.default()\r\n}\r\n\r\nexport const getNewValue = (tryParse, defaultValueFunctions) => field => {\r\n  const getInitialValue =\r\n    isUndefined(field) || isUndefined(field.getInitialValue)\r\n      ? \"default\"\r\n      : field.getInitialValue\r\n\r\n  return has(getInitialValue)(defaultValueFunctions)\r\n    ? defaultValueFunctions[getInitialValue]()\r\n    : getSafeValueParser(tryParse, defaultValueFunctions)(getInitialValue)\r\n}\r\n\r\nexport const typeFunctions = specificFunctions =>\r\n  merge(\r\n    {\r\n      value: constant,\r\n      null: constant(null),\r\n    },\r\n    specificFunctions\r\n  )\r\n\r\nexport const validateTypeConstraints = validationRules => (field, record) => {\r\n  const fieldValue = record[field.name]\r\n  const validateRule = r =>\r\n    !r.isValid(fieldValue, field.typeOptions)\r\n      ? r.getMessage(fieldValue, field.typeOptions)\r\n      : \"\"\r\n\r\n  const errors = []\r\n  for (const r of validationRules) {\r\n    const err = validateRule(r)\r\n    if (isNotEmpty(err)) errors.push(err)\r\n  }\r\n\r\n  return errors\r\n}\r\n\r\nconst getDefaultOptions = mapValues(v => v.defaultValue)\r\n\r\nexport const makerule = (isValid, getMessage) => ({ isValid, getMessage })\r\nexport const parsedFailed = val => ({ success: false, value: val })\r\nexport const parsedSuccess = val => ({ success: true, value: val })\r\nexport const getDefaultExport = (\r\n  name,\r\n  tryParse,\r\n  functions,\r\n  options,\r\n  validationRules,\r\n  sampleValue,\r\n  stringify\r\n) => ({\r\n  getNew: getNewValue(tryParse, functions),\r\n  safeParseField: getSafeFieldParser(tryParse, functions),\r\n  safeParseValue: getSafeValueParser(tryParse, functions),\r\n  tryParse,\r\n  name,\r\n  getDefaultOptions: () => getDefaultOptions(cloneDeep(options)),\r\n  optionDefinitions: options,\r\n  validateTypeConstraints: validateTypeConstraints(validationRules),\r\n  sampleValue,\r\n  stringify: val => (val === null || val === undefined ? \"\" : stringify(val)),\r\n  getDefaultValue: functions.default,\r\n})\r\n"],"file":"typeHelpers.js"}