{"version":3,"sources":["../../../src/schema/types/bool.js"],"names":["boolFunctions","boolTryParse","isBoolean","parsedSuccess","isNull","defaultCase","parsedFailed","options","allowNulls","defaultValue","isValid","requirementDescription","parse","toBoolOrNull","typeConstraints","val","opts","JSON","stringify"],"mappings":"uGAAA;AACA;;;;;;;AAOA;;;;;;;AAOA,IAAMA,aAAa,GAAG,gCAAc;AAClC,aAAS,kBAAS,IAAT,CADyB,EAAd,CAAtB;;;AAIA,IAAMC,YAAY,GAAG;AACnB,CAACC,aAAD,EAAYC,0BAAZ,CADmB;AAEnB,CAACC,UAAD,EAASD,0BAAT,CAFmB;AAGnB,CAAC,oBAAQ,MAAR,EAAgB,GAAhB,EAAqB,KAArB,EAA4B,IAA5B,CAAD,EAAoC,oBAAM,gCAAc,IAAd,CAAN,EAApC,CAHmB;AAInB,CAAC,oBAAQ,OAAR,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,KAA5B,CAAD,EAAqC,oBAAM,gCAAc,KAAd,CAAN,EAArC,CAJmB;AAKnB,CAACE,kBAAD,EAAcC,yBAAd,CALmB,CAArB;;;AAQA,IAAMC,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE;AACVC,IAAAA,YAAY,EAAE,IADJ;AAEVC,IAAAA,OAAO,EAAER,aAFC;AAGVS,IAAAA,sBAAsB,EAAE,yBAHd;AAIVC,IAAAA,KAAK,EAAEC,mBAJG,EADE,EAAhB;;;;AASA,IAAMC,eAAe,GAAG;AACtB;AACE,UAACC,GAAD,EAAMC,IAAN,UAAeA,IAAI,CAACR,UAAL,KAAoB,IAApB,IAA4BO,GAAG,KAAK,IAAnD,EADF;AAEE,oBAAM,sBAAN,EAFF,CADsB,CAAxB,C;;;;AAOe;AACb,MADa;AAEbd,YAFa;AAGbD,aAHa;AAIbO,OAJa;AAKbO,eALa;AAMb,IANa;AAObG,IAAI,CAACC,SAPQ,C","sourcesContent":["import { constant, isBoolean, isNull } from \"lodash/fp\"\r\nimport {\r\n  typeFunctions,\r\n  makerule,\r\n  parsedFailed,\r\n  parsedSuccess,\r\n  getDefaultExport,\r\n} from \"./typeHelpers\"\r\nimport {\r\n  switchCase,\r\n  defaultCase,\r\n  isOneOf,\r\n  toBoolOrNull,\r\n} from \"../../common/index.js\"\r\n\r\nconst boolFunctions = typeFunctions({\r\n  default: constant(null),\r\n})\r\n\r\nconst boolTryParse = switchCase(\r\n  [isBoolean, parsedSuccess],\r\n  [isNull, parsedSuccess],\r\n  [isOneOf(\"true\", \"1\", \"yes\", \"on\"), () => parsedSuccess(true)],\r\n  [isOneOf(\"false\", \"0\", \"no\", \"off\"), () => parsedSuccess(false)],\r\n  [defaultCase, parsedFailed]\r\n)\r\n\r\nconst options = {\r\n  allowNulls: {\r\n    defaultValue: true,\r\n    isValid: isBoolean,\r\n    requirementDescription: \"must be a true or false\",\r\n    parse: toBoolOrNull,\r\n  },\r\n}\r\n\r\nconst typeConstraints = [\r\n  makerule(\r\n    (val, opts) => opts.allowNulls === true || val !== null,\r\n    () => \"field cannot be null\"\r\n  ),\r\n]\r\n\r\nexport default getDefaultExport(\r\n  \"bool\",\r\n  boolTryParse,\r\n  boolFunctions,\r\n  options,\r\n  typeConstraints,\r\n  true,\r\n  JSON.stringify\r\n)\r\n"],"file":"bool.js"}