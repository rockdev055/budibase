{"version":3,"sources":["../../../src/schema/types/bool.js"],"names":["boolFunctions","boolTryParse","isBoolean","parsedSuccess","isNull","defaultCase","parsedFailed","options","allowNulls","defaultValue","isValid","requirementDescription","parse","toBoolOrNull","typeConstraints","val","opts","JSON","stringify"],"mappings":"uGAAA;AACA;;;;;;;AAOA;;;;;;;AAOA,IAAMA,aAAa,GAAG,gCAAc;AAClC,aAAS,kBAAS,IAAT,CADyB,EAAd,CAAtB;;;AAIA,IAAMC,YAAY,GAAG;AACnB,CAACC,aAAD,EAAYC,0BAAZ,CADmB;AAEnB,CAACC,UAAD,EAASD,0BAAT,CAFmB;AAGnB,CAAC,oBAAQ,MAAR,EAAgB,GAAhB,EAAqB,KAArB,EAA4B,IAA5B,CAAD,EAAoC,oBAAM,gCAAc,IAAd,CAAN,EAApC,CAHmB;AAInB,CAAC,oBAAQ,OAAR,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,KAA5B,CAAD,EAAqC,oBAAM,gCAAc,KAAd,CAAN,EAArC,CAJmB;AAKnB,CAACE,kBAAD,EAAcC,yBAAd,CALmB,CAArB;;;AAQA,IAAMC,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE;AACVC,IAAAA,YAAY,EAAE,IADJ;AAEVC,IAAAA,OAAO,EAAER,aAFC;AAGVS,IAAAA,sBAAsB,EAAE,yBAHd;AAIVC,IAAAA,KAAK,EAAEC,mBAJG,EADE,EAAhB;;;;AASA,IAAMC,eAAe,GAAG;AACtB;AACE,UAACC,GAAD,EAAMC,IAAN,UAAeA,IAAI,CAACR,UAAL,KAAoB,IAApB,IAA4BO,GAAG,KAAK,IAAnD,EADF;AAEE,oBAAM,sBAAN,EAFF,CADsB,CAAxB,C;;;;AAOe;AACb,MADa;AAEbd,YAFa;AAGbD,aAHa;AAIbO,OAJa;AAKbO,eALa;AAMb,IANa;AAObG,IAAI,CAACC,SAPQ,C","sourcesContent":["import { constant, isBoolean, isNull } from \"lodash/fp\"\nimport {\n  typeFunctions,\n  makerule,\n  parsedFailed,\n  parsedSuccess,\n  getDefaultExport,\n} from \"./typeHelpers\"\nimport {\n  switchCase,\n  defaultCase,\n  isOneOf,\n  toBoolOrNull,\n} from \"../../common/index.js\"\n\nconst boolFunctions = typeFunctions({\n  default: constant(null),\n})\n\nconst boolTryParse = switchCase(\n  [isBoolean, parsedSuccess],\n  [isNull, parsedSuccess],\n  [isOneOf(\"true\", \"1\", \"yes\", \"on\"), () => parsedSuccess(true)],\n  [isOneOf(\"false\", \"0\", \"no\", \"off\"), () => parsedSuccess(false)],\n  [defaultCase, parsedFailed]\n)\n\nconst options = {\n  allowNulls: {\n    defaultValue: true,\n    isValid: isBoolean,\n    requirementDescription: \"must be a true or false\",\n    parse: toBoolOrNull,\n  },\n}\n\nconst typeConstraints = [\n  makerule(\n    (val, opts) => opts.allowNulls === true || val !== null,\n    () => \"field cannot be null\"\n  ),\n]\n\nexport default getDefaultExport(\n  \"bool\",\n  boolTryParse,\n  boolFunctions,\n  options,\n  typeConstraints,\n  true,\n  JSON.stringify\n)\n"],"file":"bool.js"}