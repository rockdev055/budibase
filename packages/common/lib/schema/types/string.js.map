{"version":3,"sources":["../../../src/schema/types/string.js"],"names":["stringFunctions","stringTryParse","isString","parsedSuccess","isNull","defaultCase","v","toString","options","maxLength","defaultValue","isValid","n","requirementDescription","parse","toNumberOrNull","values","length","s","allowDeclaredValuesOnly","isBoolean","toBoolOrNull","typeConstraints","val","opts","str"],"mappings":"uGAAA;AACA;;;;;;AAMA;;;;;;;;;AASA,IAAMA,eAAe,GAAG,gCAAc;AACpC,aAAS,kBAAS,IAAT,CAD2B,EAAd,CAAxB;;;AAIA,IAAMC,cAAc,GAAG;AACrB,CAACC,YAAD,EAAWC,0BAAX,CADqB;AAErB,CAACC,UAAD,EAASD,0BAAT,CAFqB;AAGrB,CAACE,kBAAD,EAAc,UAAAC,CAAC,UAAI,gCAAcA,CAAC,CAACC,QAAF,EAAd,CAAJ,EAAf,CAHqB,CAAvB;;;AAMA,IAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,EAAE,IADL;AAETC,IAAAA,OAAO,EAAE,iBAAAC,CAAC,UAAIA,CAAC,KAAK,IAAN,IAAe,0BAAcA,CAAd,KAAoBA,CAAC,GAAG,CAA3C,EAFD;AAGTC,IAAAA,sBAAsB;AACpB,uEAJO;AAKTC,IAAAA,KAAK,EAAEC,qBALE,EADG;;AAQdC,EAAAA,MAAM,EAAE;AACNN,IAAAA,YAAY,EAAE,IADR;AAENC,IAAAA,OAAO,EAAE,iBAAAL,CAAC;AACRA,QAAAA,CAAC,KAAK,IAAN,IAAe,4BAAgBA,CAAhB,KAAsBA,CAAC,CAACW,MAAF,GAAW,CAAjC,IAAsCX,CAAC,CAACW,MAAF,GAAW,KADxD,GAFJ;AAINJ,IAAAA,sBAAsB;AACpB,0EALI;AAMNC,IAAAA,KAAK,EAAE,eAAAI,CAAC,UAAIA,CAAJ,EANF,EARM;;AAgBdC,EAAAA,uBAAuB,EAAE;AACvBT,IAAAA,YAAY,EAAE,KADS;AAEvBC,IAAAA,OAAO,EAAES,aAFc;AAGvBP,IAAAA,sBAAsB,EAAE,+CAHD;AAIvBC,IAAAA,KAAK,EAAEO,mBAJgB,EAhBX,EAAhB;;;;AAwBA,IAAMC,eAAe,GAAG;AACtB;AACE,UAACC,GAAD,EAAMC,IAAN;AACED,IAAAA,GAAG,KAAK,IAAR,IAAgBC,IAAI,CAACf,SAAL,KAAmB,IAAnC,IAA2Cc,GAAG,CAACN,MAAJ,IAAcO,IAAI,CAACf,SADhE,GADF;AAGE,UAACc,GAAD,EAAMC,IAAN,oDAAkDA,IAAI,CAACf,SAAvD,GAHF,CADsB;;AAMtB;AACE,UAACc,GAAD,EAAMC,IAAN;AACED,IAAAA,GAAG,KAAK,IAAR;AACAC,IAAAA,IAAI,CAACL,uBAAL,KAAiC,KADjC;AAEA,sBAASI,GAAT,EAAcC,IAAI,CAACR,MAAnB,CAHF,GADF;AAKE,UAAAO,GAAG,sBAAQA,GAAR,sDALL,CANsB,CAAxB,C;;;;AAee;AACb,QADa;AAEbtB,cAFa;AAGbD,eAHa;AAIbQ,OAJa;AAKbc,eALa;AAMb,OANa;AAOb,UAAAG,GAAG,UAAIA,GAAJ,EAPU,C","sourcesContent":["import { constant, isString, isNull, includes, isBoolean } from \"lodash/fp\"\r\nimport {\r\n  typeFunctions,\r\n  makerule,\r\n  parsedSuccess,\r\n  getDefaultExport,\r\n} from \"./typeHelpers\"\r\nimport {\r\n  switchCase,\r\n  defaultCase,\r\n  toBoolOrNull,\r\n  toNumberOrNull,\r\n  isSafeInteger,\r\n  isArrayOfString,\r\n} from \"../../common/index.js\"\r\n\r\nconst stringFunctions = typeFunctions({\r\n  default: constant(null),\r\n})\r\n\r\nconst stringTryParse = switchCase(\r\n  [isString, parsedSuccess],\r\n  [isNull, parsedSuccess],\r\n  [defaultCase, v => parsedSuccess(v.toString())]\r\n)\r\n\r\nconst options = {\r\n  maxLength: {\r\n    defaultValue: null,\r\n    isValid: n => n === null || (isSafeInteger(n) && n > 0),\r\n    requirementDescription:\r\n      \"max length must be null (no limit) or a greater than zero integer\",\r\n    parse: toNumberOrNull,\r\n  },\r\n  values: {\r\n    defaultValue: null,\r\n    isValid: v =>\r\n      v === null || (isArrayOfString(v) && v.length > 0 && v.length < 10000),\r\n    requirementDescription:\r\n      \"'values' must be null (no values) or an array of at least one string\",\r\n    parse: s => s,\r\n  },\r\n  allowDeclaredValuesOnly: {\r\n    defaultValue: false,\r\n    isValid: isBoolean,\r\n    requirementDescription: \"allowDeclaredValuesOnly must be true or false\",\r\n    parse: toBoolOrNull,\r\n  },\r\n}\r\n\r\nconst typeConstraints = [\r\n  makerule(\r\n    (val, opts) =>\r\n      val === null || opts.maxLength === null || val.length <= opts.maxLength,\r\n    (val, opts) => `value exceeds maximum length of ${opts.maxLength}`\r\n  ),\r\n  makerule(\r\n    (val, opts) =>\r\n      val === null ||\r\n      opts.allowDeclaredValuesOnly === false ||\r\n      includes(val)(opts.values),\r\n    val => `\"${val}\" does not exist in the list of allowed values`\r\n  ),\r\n]\r\n\r\nexport default getDefaultExport(\r\n  \"string\",\r\n  stringTryParse,\r\n  stringFunctions,\r\n  options,\r\n  typeConstraints,\r\n  \"abcde\",\r\n  str => str\r\n)\r\n"],"file":"string.js"}