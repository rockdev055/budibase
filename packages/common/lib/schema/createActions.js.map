{"version":3,"sources":["../../src/schema/createActions.js"],"names":["createTrigger","actionName","eventName","optionsCreator","condition","createAction","name","behaviourSource","behaviourName","initialOptions"],"mappings":"iIAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,WAAO;AAClCC,IAAAA,UAAU,EAAE,EADsB;AAElCC,IAAAA,SAAS,EAAE,EAFuB;AAGlC;AACA;AACA;AACAC,IAAAA,cAAc,EAAE,EANkB;AAOlC;AACA;AACAC,IAAAA,SAAS,EAAE,EATuB,EAAP,EAAtB,C;;;AAYA,IAAMC,YAAY,GAAG,SAAfA,YAAe,WAAO;AACjCC,IAAAA,IAAI,EAAE,EAD2B;AAEjCC,IAAAA,eAAe,EAAE,EAFgB;AAGjC;AACAC,IAAAA,aAAa,EAAE,EAJkB;AAKjC;AACA;AACA;AACAC,IAAAA,cAAc,EAAE,EARiB,EAAP,EAArB,C","sourcesContent":["export const createTrigger = () => ({\n  actionName: \"\",\n  eventName: \"\",\n  // function, has access to event context,\n  // returns object that is used as parameter to action\n  // only used if triggered by event\n  optionsCreator: \"\",\n  // action runs if true,\n  // has access to event context\n  condition: \"\",\n})\n\nexport const createAction = () => ({\n  name: \"\",\n  behaviourSource: \"\",\n  // name of function in actionSource\n  behaviourName: \"\",\n  // parameter passed into behaviour.\n  // any other parms passed at runtime e.g.\n  // by trigger, or manually, will be merged into this\n  initialOptions: {},\n})\n"],"file":"createActions.js"}